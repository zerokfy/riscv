#include    "declare.inc"
#include    "inst_num.inc"
#define     INST_ADDR       32'h0000_0000

module rv32i_core {
    gen_gr          gr;

    reg               pc[32]
                    , rst_d
                    , rs1[5]
                    , rs2[5]
                    , rd[5]
                    , en[2]
                    , imm12[12]
                    , imm[20]
                    , order[8]
                    , ord[8]
                    , dest[5]
                    , adr[32]
                    , rd_tmp[32]
                    , dst[5]
                    , tmp[32]
                    , ben[2]
                    , odr[8]
                    , ecall
                    , ebreak
                    ;
    proc_name         ift(pc)
                    , dec()
                    , exer(order,  rd, rs1, rs2)
                    , exei_1(order,  rd, rs1, imm12)
                    , exei_2(order,  rd, rs1, imm12)
                    , exei_jalr(order,  rd, rs1, imm12)
                    , exes(order, rs1, rs2, imm12)
                    , exeb(order, rs1, rs2, imm12)
                    , exeu(order, rd,  imm)
                    , exej(order, rd,  imm)
                    , meml_1(ord, dest, en)
                    , meml_2(ord, dest, adr)
                    , meml_last(odr, dst, tmp, ben)
                    ;

    {
        rst_d := rst_n;
        any {
            ~rst_d && rst_n : ift(INST_ADDR);
        }
        if(~rst_n) {
            ecall  := 1'b0;
            ebreak := 1'b0;
        } else {
            ecall_led  = ecall;
            ebreak_led = ebreak;
        }
    }

    proc ift {
        iaddr = pc;
        dec();
    }

    proc dec any {
        idata[6:2] == 5'h00 : any {
            idata[14:12] == 3'h0 :   exei_2(LB,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h1 :   exei_2(LH,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h2 :   exei_2(LW,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h4 :   exei_2(LBU, idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h5 :   exei_2(LHU, idata[11:7], idata[19:15], idata[31:20]);
        }
        idata[6:2] == 5'h03 : {
            exei_2(MRET,   idata[11:7], idata[19:15], idata[31:20]);
        }

        idata[6:2] == 5'h04 : any {
            idata[14:12] == 3'h0 :   exei_1(ADDI,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h1 :   exei_1(SLLI,  idata[11:7], idata[19:15], {6'h0, idata[25:20]});
            idata[14:12] == 3'h2 :   exei_1(SLTI,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h3 :   exei_1(SLTIU, idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h4 :   exei_1(XORI,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h5 :   if(idata[31:25] == 7'h0) exei_1(SRLI,  idata[11:7], idata[19:15], idata[31:20]);
                                     else                     exei_1(SRAI,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h6 :   exei_1(ORI,   idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h7 :   exei_1(ANDI,  idata[11:7], idata[19:15], idata[31:20]);
        }
        idata[6:2] == 5'h05 :    exeu(AUIPC, idata[11:7], idata[31:12]);
        idata[6:2] == 5'h08 : any {
            idata[14:12] == 3'h0 :   exes(SB, idata[19:15], idata[24:20], {idata[31:25], idata[11:7]});
            idata[14:12] == 3'h1 :   exes(SH, idata[19:15], idata[24:20], {idata[31:25], idata[11:7]});
            idata[14:12] == 3'h2 :   exes(SW, idata[19:15], idata[24:20], {idata[31:25], idata[11:7]});
        }
        idata[6:2] == 5'h0C : any {
           ~idata[25] : any {
                idata[14:12] == 3'h0 : any {
                   ~idata[30] :  exer(ADD,  idata[11:7], idata[19:15], idata[24:20]);
                    idata[30] :  exer(SUB,  idata[11:7], idata[19:15], idata[24:20]);
                }
                idata[14:12] == 3'h1 : exer(SLL,  idata[11:7], idata[19:15], idata[24:20]);
                idata[14:12] == 3'h2 : exer(SLT,  idata[11:7], idata[19:15], idata[24:20]);
                idata[14:12] == 3'h3 : exer(SLTU, idata[11:7], idata[19:15], idata[24:20]);
                idata[14:12] == 3'h4 : exer(XOR,  idata[11:7], idata[19:15], idata[24:20]);
                idata[14:12] == 3'h5 : any {
                   ~idata[30] :  exer(SRL,  idata[11:7], idata[19:15], idata[24:20]);
                    idata[30] :  exer(SRA,  idata[11:7], idata[19:15], idata[24:20]);
                }
                idata[14:12] == 3'h6 : exer(OR,   idata[11:7], idata[19:15], idata[24:20]);
                idata[14:12] == 3'h7 : exer(AND,  idata[11:7], idata[19:15], idata[24:20]);
            }
        }
        idata[6:2] == 5'h0D :    exeu(LUI, idata[11:7], idata[31:12]);
        idata[6:2] == 5'h18 :    any {
            idata[14:12] == 3'h0 :   exeb(BEQ,  idata[19:15], idata[24:20], {idata[31], idata[7], idata[30:25], idata[11:8]});
            idata[14:12] == 3'h1 :   exeb(BNE,  idata[19:15], idata[24:20], {idata[31], idata[7], idata[30:25], idata[11:8]});
            idata[14:12] == 3'h4 :   exeb(BLT,  idata[19:15], idata[24:20], {idata[31], idata[7], idata[30:25], idata[11:8]});
            idata[14:12] == 3'h5 :   exeb(BGE,  idata[19:15], idata[24:20], {idata[31], idata[7], idata[30:25], idata[11:8]});
            idata[14:12] == 3'h6 :   exeb(BLTU, idata[19:15], idata[24:20], {idata[31], idata[7], idata[30:25], idata[11:8]});
            idata[14:12] == 3'h7 :   exeb(BGEU, idata[19:15], idata[24:20], {idata[31], idata[7], idata[30:25], idata[11:8]});
        }
        idata[6:2] == 5'h19 :    exei_jalr(JALR, idata[11:7], idata[19:15], idata[31:20]);
        idata[6:2] == 5'h1B :    exej(JAL, idata[11:7], {idata[31], idata[19:12], idata[20], idata[30:21]});
        idata[6:2] == 5'h1C :    any {
            idata[14:12] == 3'h0 :   {
                if(idata[31:20] == 12'h302) exei_2(MRET,   idata[11:7], idata[19:15], idata[31:20]);
                else if(~idata[20])         exei_2(ECALL,  idata[11:7], idata[19:15], idata[31:20]);
                else                        exei_2(EBREAK, idata[11:7], idata[19:15], idata[31:20]);
            }
            idata[14:12] == 3'h1 :   exei_2(CSRRW,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h2 :   exei_2(CSRRS,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h3 :   exei_2(CSRRC,  idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h5 :   exei_2(CSRRWI, idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h6 :   exei_2(CSRRSI, idata[11:7], idata[19:15], idata[31:20]);
            idata[14:12] == 3'h7 :   exei_2(CSRRCI, idata[11:7], idata[19:15], idata[31:20]);
        }
    }

    proc exer {
        any {
            order == ADD :  gr.rd(rd, gr.rs1(rs1) +  gr.rs2(rs2));
            order == SUB :  gr.rd(rd, gr.rs1(rs1) -  gr.rs2(rs2));
            order == AND :  gr.rd(rd, gr.rs1(rs1) &  gr.rs2(rs2));
            order == OR :   gr.rd(rd, gr.rs1(rs1) |  gr.rs2(rs2));
            order == XOR :  gr.rd(rd, gr.rs1(rs1) ^  gr.rs2(rs2));
            order == SLL :  gr.rd(rd, gr.rs1(rs1) << gr.rs2(rs2)[4:0]);
            order == SLT :  any {
                gr.rs1(rs1)[31] ==  gr.rs2(rs2)[31] :   gr.rd(rd, 32'(gr.rs1(rs1)<gr.rs2(rs2)));
               ~gr.rs1(rs1)[31] &   gr.rs2(rs2)[31] :   gr.rd(rd, 32'h0);
                gr.rs1(rs1)[31] &  ~gr.rs2(rs2)[31] :   gr.rd(rd, 32'h1);
            }
            order == SLTU : gr.rd(rd, 32'(gr.rs1(rs1)<gr.rs2(rs2)));
            order == SRL :  gr.rd(rd, gr.rs1(rs1) >> gr.rs2(rs2)[4:0]);
            order == SRA :  any {
               ~gr.rs1(rs1)[31] :   gr.rd(rd, gr.rs1(rs1)>>gr.rs2(rs2)[4:0]);
                gr.rs1(rs1)[31] :   gr.rd(rd, (64#gr.rs1(rs1)>>gr.rs2(rs2)[4:0])[31:0]);
            }
        }
        ift(pc+32'h4);
    }

    proc exei_1 {
        any {
            order == ADDI :     gr.rd(rd, (gr.rs1(rs1)+32#imm12)[31:0]);
            order == SLLI :     gr.rd(rd, (gr.rs1(rs1) << 32'imm12)[31:0]);
            order == SLTI : any {
               ~gr.rs1(rs1)[31] &  ~imm12[11] :   gr.rd(rd, 32'(gr.rs1(rs1)<32'imm12));
               ~gr.rs1(rs1)[31] &   imm12[11] :   gr.rd(rd, 32'h0);
                gr.rs1(rs1)[31] &  ~imm12[11] :   gr.rd(rd, 32'h1);
                gr.rs1(rs1)[31] &   imm12[11] :   gr.rd(rd, 32'(gr.rs1(rs1)[30:0]<31#imm12));
            }
            order == SLTIU :    gr.rd(rd, 32'(gr.rs1(rs1)<32#imm12));
            order == XORI :     gr.rd(rd, gr.rs1(rs1) ^ 32#imm12);
            order == SRLI :     gr.rd(rd, 32'(gr.rs1(rs1)>>imm12));
            order == SRAI :     gr.rd(rd, (64#(gr.rs1(rs1))>>imm12[4:0])[31:0]);
            order == ORI :      gr.rd(rd, gr.rs1(rs1) | 32#imm12);
            order == ANDI :     gr.rd(rd, gr.rs1(rs1) & 32#imm12);
        }
        ift(pc+32'h4);
    }

    proc exei_jalr {
       gr.rd(rd, pc + 32'h4);
       ift({(gr.rs1(rs1) + 32#imm12)[31:1], 1'b0});
    }

    proc exei_2 any {
        order == LB : {
            dmem_r();
            daddr = gr.rs1(rs1) + 32#imm12;
            meml_1(order, rd, daddr[1:0]);
        }
        order == LH : {
            dmem_r();
            daddr = gr.rs1(rs1) + 32#imm12;
            if(daddr[1:0] == 2'h3)  meml_2(order, rd, daddr);
            else                    meml_1(order, rd, daddr[1:0]);
        }
        order == LW : {
            dmem_r();
            daddr = gr.rs1(rs1) + 32#imm12;
            if(daddr[1:0] == 2'h0)  meml_1(order, rd, daddr[1:0]);
            else                    meml_2(order, rd, daddr);
        }
        order == LBU : {
            dmem_r();
            daddr = gr.rs1(rs1) + 32'imm12;
            meml_1(order, rd, daddr[1:0]);
        }
        order == LHU : {
            dmem_r();
            daddr = gr.rs1(rs1) + 32'imm12;
            if(daddr[1:0] == 2'h0)  meml_1(order, rd, daddr[1:0]);
            else                    meml_2(order, rd, daddr);
        }
        order == CSRRW : {
            gr.rd(rd, 32'h0);
            ift(pc+32'h4);
        }
        order == CSRRS : {
            gr.rd(rd, 32'h0);
            ift(pc+32'h4);
        }
        order == CSRRC : {
            gr.rd(rd, 32'h0);
            ift(pc+32'h4);
        }
        order == CSRRWI : {
            gr.rd(rd, 32'h0);
            ift(pc+32'h4);
        }
        order == CSRRSI : {
            gr.rd(rd, 32'h0);
            ift(pc+32'h4);
        }
        order == CSRRCI : {
            gr.rd(rd, 32'h0);
            ift(pc+32'h4);
        }
        order == ECALL : {
            ecall := 1'b1;
            exei_2.finish();
        }
        order == EBREAK : {
            ebreak := 1'b1;
            exei_2.finish();
        }
        order == MRET : {
            ift(pc+32'h4);
        }
    }

    proc exes {
        any {
            order == SB : {
                dmem_w();
                daddr = gr.rs1(rs1) + 32#imm12;
                any {
                    daddr[1:0] == 2'h0 : wdata = {24'h0, gr.rs2(rs2)[7:0]};
                    daddr[1:0] == 2'h1 : wdata = {16'h0, gr.rs2(rs2)[7:0],  8'h0};
                    daddr[1:0] == 2'h2 : wdata = {8'h0,  gr.rs2(rs2)[7:0], 16'h0};
                    daddr[1:0] == 2'h3 : wdata = {       gr.rs2(rs2)[7:0], 24'h0};
                }
            }
            order == SH : {
                dmem_w();
                daddr = gr.rs1(rs1) + 32#imm12;
                any {
                    daddr[1:0] == 2'h0 : wdata = {16'h0, gr.rs2(rs2)[15:0]};
                    daddr[1:0] == 2'h1 : wdata = {8'h0,  gr.rs2(rs2)[15:0],  8'h0};
                    daddr[1:0] == 2'h2 : wdata = {       gr.rs2(rs2)[15:0], 16'h0};
                    daddr[1:0] == 2'h3 : wdata = {       gr.rs2(rs2)[7:0],  24'h0};
                }
            }
            order == SW : {
                dmem_w();
                daddr = gr.rs1(rs1) + 32#imm12;
                any {
                    daddr[1:0] == 2'h0 : wdata =  gr.rs2(rs2);
                    daddr[1:0] == 2'h1 : wdata = {gr.rs2(rs2)[23:0],  8'h0};
                    daddr[1:0] == 2'h2 : wdata = {gr.rs2(rs2)[15:0], 16'h0};
                    daddr[1:0] == 2'h3 : wdata = {gr.rs2(rs2)[7:0],  24'h0};
                }
            }
        }
        ift(pc+32'h4);
    }

    proc exeb any {
        order == BEQ :  {
            if(gr.rs1(rs1) == gr.rs2(rs2))  ift(pc+32#{imm12, 1'b0});
            else                            ift(pc+32'h4);
        }
        order == BNE :  {
            if(gr.rs1(rs1) != gr.rs2(rs2))  ift(pc+32#{imm12, 1'b0});
            else                            ift(pc+32'h4);
        }
        order == BLTU : {
            if(gr.rs1(rs1) < gr.rs2(rs2))   ift(pc+32#{imm12, 1'b0});
            else                            ift(pc+32'h4);
        }
        order == BGEU : {
            if(gr.rs1(rs1) >= gr.rs2(rs2))  ift(pc+32#{imm12, 1'b0});
            else                            ift(pc+32'h4);
        }
        order == BLT :  any {
            gr.rs1(rs1)[31] == gr.rs2(rs2)[31] : {
                if(gr.rs1(rs1)[30:0] < gr.rs2(rs2)[30:0])   ift(pc+32#{imm12, 1'b0});
                else                                        ift(pc+32'h4);
            }
           ~gr.rs1(rs1)[31] &&  gr.rs2(rs2)[31] :           ift(pc+32'h4);
            gr.rs1(rs1)[31] && ~gr.rs2(rs2)[31] :           ift(pc+32#{imm12, 1'b0});
        }
        order == BGE :  any {
            gr.rs1(rs1)[31] == gr.rs2(rs2)[31] : {
                if(gr.rs1(rs1)[30:0] >= gr.rs2(rs2)[30:0])  ift(pc+32#{imm12, 1'b0});
                else                                        ift(pc+32'h4);
           }
           ~gr.rs1(rs1)[31] &&  gr.rs2(rs2)[31] :           ift(pc+32#{imm12, 1'b0});
            gr.rs1(rs1)[31] && ~gr.rs2(rs2)[31] :           ift(pc+32'h4);
        }
    }

    proc exeu {
        any {
            order == AUIPC :    gr.rd(rd, pc + {imm, 12'h000});
            order == LUI :      gr.rd(rd, {imm, 12'h000});
        }
        ift(pc+32'h4);
    }

    proc exej {
        any {
            order == JAL :  {
                gr.rd(rd, pc + 32'h4);
                ift(pc+32#{imm, 1'b0});
            }
        }
    }

    proc meml_1 {
        any {
            ord == LB : any {
                en == 2'h0 : gr.rd(dest, 32#(rdata[7:0]));
                en == 2'h1 : gr.rd(dest, 32#(rdata[15:8]));
                en == 2'h2 : gr.rd(dest, 32#(rdata[23:16]));
                en == 2'h3 : gr.rd(dest, 32#(rdata[31:24]));
            }
            ord == LH : any {
                en == 2'h0 : gr.rd(dest, 32#(rdata[15:0]));
                en == 2'h1 : gr.rd(dest, 32#(rdata[23:8]));
                en == 2'h2 : gr.rd(dest, 32#(rdata[31:16]));
            }
            ord == LW : gr.rd(dest, rdata);
            ord == LBU : any {
                en == 2'h0 : gr.rd(dest, 32'(rdata[7:0]));
                en == 2'h1 : gr.rd(dest, 32'(rdata[15:8]));
                en == 2'h2 : gr.rd(dest, 32'(rdata[23:16]));
                en == 2'h3 : gr.rd(dest, 32'(rdata[31:24]));
            }
            ord == LHU : any {
                en == 2'h0 : gr.rd(dest, 32'(rdata[15:0]));
                en == 2'h1 : gr.rd(dest, 32'(rdata[23:8]));
                en == 2'h2 : gr.rd(dest, 32'(rdata[31:16]));
            }
        }
        ift(pc+32'h4);
    }

    proc meml_2 {
        any {
            ord == LH : {
                rd_tmp := {24'h0, rdata[31:24]};
                daddr = adr + 32'h4;
            }
            ord == LW : {
                any {
                    adr[1:0] == 2'h1 :  rd_tmp := {8'h0, rdata[31:8]};
                    adr[1:0] == 2'h2 :  rd_tmp := {16'h0, rdata[31:16]};
                    adr[1:0] == 2'h3 :  rd_tmp := {24'h0, rdata[31:24]};
                }
                daddr = adr + 32'h4;
            }
            ord == LHU : {
                rd_tmp := {24'h0, rdata[31:24]};
                daddr = adr + 32'h4;
            }
        }
        meml_last(ord, dest, rd_tmp, adr[1:0]);
    }

    proc meml_last {
        any {
            odr == LH : gr.rd(dst, 32#{rdata[8:0], tmp[8:0]});
            odr == LW : any {
                ben[1:0] == 2'h1 :  gr.rd(dst, {rdata[7:0],  rd_tmp[23:0]});
                ben[1:0] == 2'h2 :  gr.rd(dst, {rdata[15:0], rd_tmp[15:0]});
                ben[1:0] == 2'h3 :  gr.rd(dst, {rdata[23:0], rd_tmp[7:0]});
            }
            odr == LHU : {
                gr.rd(dst, 32'{rdata[8:0], rd_tmp[8:0]});
            }
        }
        ift(pc+32'h4);
    }
}


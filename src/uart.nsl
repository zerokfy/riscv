//  Baud-rate : 115200bps
declare uart {
    input       uart_tx;
    output      uart_rx;

    input       txd[8];
    output      rxd[8];

    input       mode;

    func_in     uart_txd(txd);
    func_out    uart_rxd(rxd);
    
    func_in     mode();
}

module uart {
    reg           rxd_d[3]
                , sbit_cnt[10]
                , store_cnt[10]
                , rxd_cnt[4]
                , rxd_fifo[8]
                ;
    proc_name   det_fedge(rxd_d);
    proc_name   det_sbit(sbit_cnt);
    proc_name   store_rxd(store_cnt);


    function mode {
        det_start();
    }

    proc det_fedge {
        rxd_d := {rxd_d[1:0], rxd};
        //  Synchronization
        any {
            rxd_d[2] && ~rxd_d[1] : det_sbit(10'h0);
        }
    }

    proc det_sbit {
        sbit_cnt++;
        any {
            sbit_cnt >= 216 : tranceive(4'h0);
            rxd_d[2]        : det_fedge(3'h0);
        }
    }

    proc store_rxd {
        store_cnt++;
        any {
            store_cnt == 216 : {
                uart_tx :=  tx_buf[7];
                tx_buf  :=  {tx_buf[6:0], 1'b0};
            }
            store_cnt == 433    : {
                                rx_cnt++;
                                count   :=  10'h000;
                                rx_buf  :=  {rx_buf[6:0], uart_rx};
                                tranceive();
                              }
            rxd_cnt == 8    : {
                                uart_rxd(rx_buf);
                                tranceive.finish();
                              }
        }
    }

        func uart_txd {
            tx_buf  :=  txd;
        }
    }
}


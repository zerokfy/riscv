declare dmac {
    input           HRDATA[31:0];
    output          HADDR[31:0],
                    HWDATA[31:0],
                    HBURST[2:0],
                    HSIZE[1:0],
                    HTRANS[1:0],
                    HWRITE;
    input           rxd[7:0];
    output          txd[7:0];

    func_in         write_req(rxd);
    func_in         read_req();
    func_out        read_ack(txd);
    func_out        bus_req();
    func_in         bus_grant();
    func_out        bus_open();
}

module dmac {
    reg             txd_buf[7:0],
                    rxd_buf[7:0],
                    write,
                    txd_dummy;
    func_self       exec_write(),
                    exec_read();

    func write_req {
        rxd_buf         :=  rxd;
        write           :=  1'b1;
        bus_req();
    }

    func read_req {
        write           :=  1'b0;
        bus_req();
    }

    func bus_grant {
        if(write)   exec_write();
        else        exec_read();
    }

    func exec_write {
        seq {
            {
                HADDR[31:0]     :=  32'h0000_1000;
                HBURST[2:0]     :=  3'h0;
                HSIZE[1:0]      :=  2'h0;
                HTRANS[1:0]     :=  2'b01;
                HWRITE          :=  write;
            }
            HWDATA[31:0]    :=  {24'h000_0000, rxd_buf};
        }
    }
        
    func exec_read {
        seq {
            {
                HADDR[31:0]     :=  32'h0000_1000;
                HBURST[2:0]     :=  3'h0;
                HSIZE[1:0]      :=  2'h0;
                HTRANS[1:0]     :=  2'b01;
                HWRITE          :=  write;
            }
            txd_dummy       :=  HRDATA[7:0];
            txd_buf         :=  HRDATA[7:0];
            read_ack(txd_buf);
        }
    }
}


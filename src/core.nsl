#include    "inst_num.nsl"
#define     INST_ADDR       32'h0000_0000;

declare core {
    input         iaddr[32]
                , idata[32]
                , daddr[32]
                , rdata[32]
                ;
    output        iwdata[32]
                , wdata[32]
                ;
    func_out      imem_read(iaddr)
                , imem_write(iaddr, iwdata)
                , dmem_read(addr)
                , dmem_write(addr, wdata)
                ;
}

module core {
    mem               gr[32][32]
                    ;
    reg               pc[32] = INST_ADDR
                    , rst_d[3]
                    , inst[32]
                    , rs1[5]
                    , rs2[5]
                    , rs3[5]
                    , rd[5]
                    , imm[20]
                    , order[8]
                    , rsv_dat[32]
                    ;
    proc_name         ift(pc)
                    , dec(inst)
                    , exer(order,  rd, rs1, rs2)
                    , exei(order,  rd, rs1, imm)
                    , exes(order,  rs1, rs2, imm)
                    , exeb(order,  rs1, rs2, imm)
                    , exeu(order,  rd, imm)
                    , exej(order,  rd, imm)
                    ;

    rst_d := p_reset;
    any {
        rst_d && ~p_reset : {
            ift(INST_ADDR);
        }
    }

    proc ift {
        dec(imem_read(pc++));
    }

    proc dec any {
        inst[6:2] == 5'h00 : any {
            inst[14:12] == 3'h0 :   exei(LB,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h1 :   exei(LH,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h2 :   exei(LW,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h4 :   exei(LBU, inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h5 :   exei(LHU, inst[11:7], inst[19:15], inst[31:20]);
        }
        inst[6:2] == 5'h04 : any {
            inst[14:12] == 3'h0 :   exei(ADDI,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h2 :   exei(SLTI,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h3 :   exei(SLTIU, inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h4 :   exei(XORI,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h6 :   exei(ORI,   inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h7 :   exei(ANDI,  inst[11:7], inst[19:15], inst[31:20]);
        }
        inst[6:2] == 5'h05 :    exeu(AUIPC, inst[11:7], inst[31:12]);
        inst[6:2] == 5'h08 : any {
            inst[14:12] == 3'h0 :   exes(SB, inst[19:15], inst[24:20], {inst[31:25], inst[11:7]});
            inst[14:12] == 3'h1 :   exes(SH, inst[19:15], inst[24:20], {inst[31:25], inst[11:7]});
            inst[14:12] == 3'h2 :   exes(SW, inst[19:15], inst[24:20], {inst[31:25], inst[11:7]});
        }
        inst[6:2] == 5'h0C : any {
           ~inst[25] : any {
                inst[14:12] == 3'h0 : any {
                   ~inst[30] :  exer(ADD,  inst[11:7], inst[19:15], inst[24:20]);
                    inst[30] :  exer(SUB,  inst[11:7], inst[19:15], inst[24:20]);
                }
                inst[14:12] == 3'h1 : exer(SLL,  inst[11:7], inst[19:15], inst[24:20]);
                inst[14:12] == 3'h2 : exer(SLT,  inst[11:7], inst[19:15], inst[24:20]);
                inst[14:12] == 3'h3 : exer(SLTU, inst[11:7], inst[19:15], inst[24:20]);
                inst[14:12] == 3'h4 : exer(XOR,  inst[11:7], inst[19:15], inst[24:20]);
                inst[14:12] == 3'h5 : any {
                   ~inst[30] :  exer(SRL,  inst[11:7], inst[19:15], inst[24:20]);
                    inst[30] :  exer(SRA,  inst[11:7], inst[19:15], inst[24:20]);
                }
                inst[14:12] == 3'h6 : exer(OR,   inst[11:7], inst[19:15], inst[24:20]);
                inst[14:12] == 3'h7 : exer(AND,  inst[11:7], inst[19:15], inst[24:20]);
            }
        }
        inst[6:2] == 5'h0D :    exeu(LUI, inst[11:7], inst[31:12]);
        inst[6:2] == 5'h18 :    any {
            inst[14:12] == 3'h0 :   exeb(BEQ,  inst[19:15], inst[24:20], {inst[31], inst[7], inst[30:25], inst[11:8], 1'b0});
            inst[14:12] == 3'h1 :   exeb(BNE,  inst[19:15], inst[24:20], {inst[31], inst[7], inst[30:25], inst[11:8], 1'b0});
            inst[14:12] == 3'h4 :   exeb(BLT,  inst[19:15], inst[24:20], {inst[31], inst[7], inst[30:25], inst[11:8], 1'b0});
            inst[14:12] == 3'h5 :   exeb(BGE,  inst[19:15], inst[24:20], {inst[31], inst[7], inst[30:25], inst[11:8], 1'b0});
            inst[14:12] == 3'h6 :   exeb(BLTU, inst[19:15], inst[24:20], {inst[31], inst[7], inst[30:25], inst[11:8], 1'b0});
            inst[14:12] == 3'h7 :   exeb(BGEU, inst[19:15], inst[24:20], {inst[31], inst[7], inst[30:25], inst[11:8], 1'b0});
        }
        inst[6:2] == 5'h19 :    exei(JALR, inst[11:7], inst[19:15], inst[31:20]);
        inst[6:2] == 5'h1B :    exej(JAL,  inst[11:7], {inst[31], inst[19:12], inst[20], inst[30:21], 1'b0});
        inst[6:2] == 5'h1C :    any {
            inst[14:12] == 3'h0 :   any {
               ~inst[20] :  exei(ECALL,  inst[11:7], inst[19:15], inst[31:20]);
                inst[20] :  exei(EBREAK, inst[11:7], inst[19:15], inst[31:20]);
            }
            inst[14:12] == 3'h1 :   exei(CSRRW,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h2 :   exei(CSRRS,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h3 :   exei(CSRRC,  inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h5 :   exei(CSRRWI, inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h6 :   exei(CSRRSI, inst[11:7], inst[19:15], inst[31:20]);
            inst[14:12] == 3'h7 :   exei(CSRRCI, inst[11:7], inst[19:15], inst[31:20]);
        }
    }

    proc exer {
        any {
            order == ADD :  gr[rd] :=   gr[rs1] +  gr[rs2];
            order == SUB :  gr[rd] :=   gr[rs1] -  gr[rs2];
            order == AND :  gr[rd] :=   gr[rs1] &  gr[rs2];
            order == OR :   gr[rd] :=   gr[rs1] |  gr[rs2];
            order == XOR :  gr[rd] :=   gr[rs1] ^  gr[rs2];
            order == SLL :  gr[rd] :=   gr[rs1] << gr[rs2];
            order == SLT :  any {
                gr[rs1][31] ==  gr[rs2][31] :   gr[rd] :=   32'(gr[rs1]<gr[rs2]);
               ~gr[rs1][31] &   gr[rs2][31] :   gr[rd] :=   32'h1;
                gr[rs1][31] &  ~gr[rs2][31] :   gr[rd] :=   32'h0;
            }
            order == SLTU : gr[rd] :=   gr[rs1] < gr[rs2];
            order == SRL :  gr[rd] :=   gr[rs1] >> gr[rs2];
            order == SRA :  any {
               ~gr[rs1][31] :   gr[rd] :=   gr[rs1] >> gr[rs2];
                gr[rs1][31] :   gr[rd] :=   {32'h1, gr[rs1][31:gr[rs2]]}[31:0];
            }
        }
        ift(pc);
    }

    proc exei seq {
        any {
            order == LB :       seq {
                                    dmem_read(gr[rs1]+32#imm)[7:0];
                                    gr[rd] := rdata;
                                }
            order == LH :       seq {
                                    dmem_read(gr[rs1]+32#imm)[15:0];
                                    gr[rd] := rdata;
                                }
            order == LW :       seq {
                                    dmem_read(gr[rs1]+32#imm);
                                    gr[rd] := rdata;
                                }
            order == LBW :      seq {
                                    dmem_read(gr[rs1]+32'imm);
                                    gr[rd] := rdata;
                                }
            order == LHW :      seq {
                                    dmem_read(gr[rs1]+32'imm)[15:0];
                                    gr[rd] := rdata;
                                }
            order == ADDI :     gr[rd] :=  (gr[rs1] + 32#imm)[31:0];
            order == SLTI :     gr[rd] :=  (gr[rs1] < 32#imm)[31:0];
            order == SLTIU :    gr[rd] :=  (gr[rs1] < 32#imm)[31:0];
            order == XORI :     gr[rd] :=   gr[rs1] ^ 32#imm;
            order == ORI :      gr[rd] :=   gr[rs1] | 32#imm;
            order == ANDI :     gr[rd] :=   gr[rs1] & 32#imm;
            order == JALR :     {
                                    gr[rd] :=   pc + 32'h4;
                                    pc     :=   {(gr[rs1] + 32#imm)[31:1], 1'b0};
                                }
        }
        ift(pc);
    }

    proc exes seq {
        any {
            order == SB :   mem_write(gr[rs1]+32#imm, gr[rs2][7:0]);
            order == SH :   mem_write(gr[rs1]+32#imm, gr[rs2][15:0]);
            order == SW :   mem_write(gr[rs1]+32#imm, gr[rs2][31:0]);
        }
        ift(pc);
    }

    proc exeb any {
        order == BEQ :  any {
            gr[rs1] == gr[rs2] : ift(pc+32#imm);
            gr[rs1] != gr[rs2] : ift(pc);
        }
        order == BNE :  any {
            gr[rs1] != gr[rs2] : ift(pc+32#imm);
            gr[rs1] == gr[rs2] : ift(pc);
        }
        order == BLTU : any {
            gr[rs1] <  gr[rs2] : ift(pc+32#imm);
            gr[rs1] >= gr[rs2] : ift(pc);
        }
        order == BGEU : any {
            gr[rs1] >  gr[rs2] : ift(pc+32#imm);
            gr[rs1] <= gr[rs2] : ift(pc);
        }
        order == BLT :  any {
            gr[rs1][31] == gr[rs2][31] : any {
                gr[rs1][30:0] <  gr[rs2][30:0] : ift(pc+32#imm);
                gr[rs1][30:0] >= gr[rs2][30:0] : ift(pc);
            }
           ~gr[rs1][31] &&  gr[rs2][31] :   ift(pc);
            gr[rs1][31] && ~gr[rs2][31] :   ift(pc+32#imm);
        }
        order == BGE :  any {
            gr[rs1][31] ==  gr[rs2][31] : any {
                gr[rs1][30:0] >  gr[rs2][30:0] : pc := pc + 32#imm;
                gr[rs1][30:0] <= gr[rs2][30:0] : ift(pc);
           }
           ~gr[rs1][31] &&  gr[rs2][31] :   pc := pc + 32#imm;
            gr[rs1][31] && ~gr[rs2][31] :   ift(pc);
        }
    }

    proc exeu any {
        order == AUIPC :    gr[rd] :=   pc + {imm, 12'h000};
        order == LUI :      gr[rd] :=   {imm, 12'h000};
        ift(pc);
    }

    proc exej {
        order == JAL :  {
            gr[rd] :=   pc + 32'h4;
            ift(pc+32'imm);
        }
    }
}

